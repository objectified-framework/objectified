openapi: 3.1.0
info:
  title: Objectified API
  version: 0.1.2
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  description: |
    Objectified is a **time-series object database that supports dynamic schemas**.

    Objectified can also be utilized as a _Schema Store_, providing schema information
    for a project, framework, or platform.

    This API specification defines REST services for Objectified.  Requests made to
    this server can only be made using the `application/json` content type.
  contact:
    name: Objectified Project Members
    url: https://github.com/objectified-framework
    email: ksuenobu@fastmail.com
servers:
  - url: https://api.objectified.wiki/v1
tags:
  - name: Auth
    description: |
      Authentication services that are used in conjunction with third party authenticators.  These
      services provide access to user accounts based on their email addresses.  Any additional
      information provided by the third party authenticators are stored in the users' associated
      accounts, or in session variables as necessary.  Remaining information such as a user's
      name, or account settings are stored in Objectified through other services.
  - name: User
    description: |
      User services are applied after a user login is complete.  Once a user has been successfully
      authenticated using auth, the user data store can be modified or retrieved.
  - name: DataType
    description: Data Type service is used for CRUD operations associated with data types.
  - name: Tenant
    description: |
      Tenant services are used for CRUD services on Tenants, along with tenancy
      assignment.
paths:
  /auth:
    post:
      tags:
        - Auth
      summary: Login service
      operationId: login
      description: |
        Logs a user into the system via their username and source combination.
      security: []
      requestBody:
        description: The user credentials with which to login.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
        '403':
          description: Access forbidden
  /user:
    get:
      tags:
        - User
      summary: User retrieval service
      operationId: getUser
      description: Retrieves a user's data payload from the JWT.
      security:
        - JWT: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Access forbidden
    put:
      tags:
        - User
      summary: Updates a user's data section
      operationId: putUser
      description: Replaces a user's data payload from the JWT.
      security: []
      requestBody:
        description: The user payload, only the data field is used.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: No content
        '401':
          description: Unauthorized
        '403':
          description: Access forbidden
  /data-type:
    get:
      tags:
        - DataType
      summary: Get data types
      operationId: listDataTypes
      description: |
        Retrieves a list of data types.  This list is a high level list, and
        does not include things like a user's ID.
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataType'
        '401':
          description: Unauthorized
    post:
      tags:
        - DataType
      summary: Create data type
      operationId: createDataType
      description: Creates a new data type
      security: []
      requestBody:
        description: The user payload, only the data field is used.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataType'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataType'
        '401':
          description: Unauthorized
  /data-type/{id}:
    get:
      tags:
        - DataType
      summary: Retrieves a data type by ID
      operationId: getDataTypeById
      description: Retrieves a data type by its ID
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the data type.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataType'
        '401':
          description: Unauthorized
        '404':
          description: Not found
    put:
      tags:
        - DataType
      summary: Edits data type
      operationId: updateDataType
      description: Saves changes to a data type
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the data type.
      requestBody:
        description: The user payload, only the data field is used.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataType'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataType'
        '401':
          description: Unauthorized
        '404':
          description: Not found
    delete:
      tags:
        - DataType
      summary: Disables a data type
      operationId: disableDataType
      description: Disables a data type
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the data type.
      responses:
        '201':
          description: No content
        '401':
          description: Unauthorized
        '404':
          description: Not found
  /tenant:
    get:
      tags:
        - Tenant
      summary: Lists tenants
      operationId: listTenants
      description: Retrieves a list of tenants
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tenant'
        '404':
          description: Not found
    post:
      tags:
        - Tenant
      summary: Creates a new tenant
      operationId: createTenant
      description: Creates a new Tenant record
      security: []
      requestBody:
        description: The tenant to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '401':
          description: Unauthorized
  /tenant/{id}:
    get:
      tags:
        - Tenant
      summary: Retrieves a tenant
      operationId: getTenantById
      description: Retrieves a tenant by its ID
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the tenant.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '404':
          description: Not found
    put:
      tags:
        - Tenant
      summary: Edits a tenant
      operationId: editTenant
      description: Edits an existing Tenant record
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the tenant.
      requestBody:
        description: The tenant to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '404':
          description: Not found
    delete:
      tags:
        - Tenant
      summary: Disables a tenant
      operationId: disableTenantById
      description: Disables/Deletes an existing Tenant record
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the data type.
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '404':
          description: Not found
  /tenant/{id}/user:
    get:
      tags:
        - Tenant
      summary: Lists tenant users
      operationId: listUsersByTenantId
      description: Lists users by tenant ID
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the tenant.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TenantUser'
        '401':
          description: Unauthorized
        '404':
          description: Not found
    post:
      tags:
        - Tenant
      summary: Assigns a user to a tenant
      operationId: addUserToTenantId
      description: Adds a user to a tenancy list
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the tenant.
      requestBody:
        description: The user payload, only the data field is used.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantUser'
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized
        '404':
          description: Not found
  /tenant/{id}/user/{userId}:
    delete:
      tags:
        - Tenant
      summary: Removes a user tenancy
      operationId: removeUserFromTenant
      description: Removes a user by ID from a tenant by ID
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the tenant.
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: UUID
          description: The User ID.
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '404':
          description: Not found
components:
  securitySchemes:
    JWT:
      type: http
      description: JWT Authorization header using Bearer scheme.
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      x-schema: obj
      required:
        - username
        - source
        - jwt
      description: Login credentials input
      properties:
        id:
          type: string
          format: uuid
          description: User ID
        emailAddress:
          type: string
          description: The email address of the user logging in.
        source:
          type: array
          items:
            type: string
            enum:
              - github
              - gitlab
              - azure
          description: Source of the account login.
        data:
          type: object
          description: Extra data associated with the user.
    DataType:
      type: object
      x-schema: obj
      required:
        - name
        - description
        - dataType
      description: |
        Data Type defines a storage type that can be associated with a field.
        It defines the type of information that is stored, along with any defaults
        or enumerated values.
      properties:
        id:
          type: string
          format: uuid
          description: Data Type ID
        ownerId:
          type: string
          format: uuid
          description: User ID that owns or created this type
        name:
          type: string
          description: Name of the data type
          maxLength: 80
        description:
          type: string
          description: Description of the data type
          maxLength: 4096
        dataType:
          type: string
          enum:
            - STRING
            - BOOLEAN
            - NUMBER
            - INTEGER
            - NULL
            - ARRAY
            - OBJECT
        dataFormat:
          type: string
          description: The format of the data
        isArray:
          type: boolean
          description: Indicates if the data type stores an array of data
        maxLength:
          type: integer
          description: The maximum length stored in the data type
        pattern:
          type: string
          description: Data pattern (regex) that the data must validate against
        enumValues:
          type: array
          items:
            type: string
          description: Array of values that the enumeration can store
        enumDescriptions:
          type: array
          items:
            type: string
          description: The descriptions for each of the enumeration values
        examples:
          type: array
          items:
            type: string
          description: Free-formed examples that the data type can hold
        enabled:
          type: boolean
          default: true
          description: Indicates if the data type is enabled and usable
        coreType:
          type: boolean
          default: false
          description: Indicates if the data type is a core data type, and cannot be modified or deleted.
        createDate:
          type: string
          format: date-time
          description: Date the data type was created
        updateDate:
          type: string
          format: date-time
          description: Date of the last update to the data type
        deleteDate:
          type: string
          format: date-time
          description: Date the data type was disabled
    Tenant:
      type: object
      x-schema: obj
      required:
        - ownerId
        - name
      description: |
        Tenants are definitions used to isolate like- objects with a company or
        group name.
      properties:
        id:
          type: string
          format: UUID
          description: The ID of the Tenant
        ownerId:
          type: string
          format: UUID
          description: User ID that owns the Tenant
        name:
          type: string
          description: The name of the tenant
        enabled:
          type: boolean
          description: Indicates if the tenant record is enabled
        data:
          type: object
          description: Free-form tenant record information
    TenantUser:
      type: object
      x-schema: obj
      required:
        - tenantId
        - userId
      description: This object describes a user tenancy membership.
      properties:
        id:
          type: string
          format: UUID
          description: The ID of the Tenant User record
        tenantId:
          type: string
          format: UUID
          description: The ID of the Tenant
        userId:
          type: string
          format: UUID
          description: The User ID that belongs to the Tenant
        enabled:
          type: boolean
          description: Indicates if the user to tenant record is enabled
        permissions:
          type: object
          description: Permissions storage object for this user record, used for ABAC
