openapi: 3.1.0
info:
  title: Objectified API
  version: 0.1.6
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  description: |
    Objectified is a **time-series object database that supports dynamic schemas**.

    Objectified can also be utilized as a _Schema Store_, providing schema information
    for a project, framework, or platform.

    This API specification defines REST services for Objectified.  Requests made to
    this server can only be made using the `application/json` content type.
  contact:
    name: Objectified Project Members
    url: https://github.com/objectified-framework
    email: ksuenobu@fastmail.com
servers:
  - url: https://api.objectified.wiki/v1
tags:
  - name: Auth
    description: |
      Authentication services that are used in conjunction with third party authenticators.  These
      services provide access to user accounts based on their email addresses.  Any additional
      information provided by the third party authenticators are stored in the users' associated
      accounts, or in session variables as necessary.  Remaining information such as a user's
      name, or account settings are stored in Objectified through other services.
  - name: User
    description: |
      User services are applied after a user login is complete.  Once a user has been successfully
      authenticated using auth, the user data store can be modified or retrieved.
  - name: DataType
    description: |
      `DataType`s describes the types of data that can be handled by Objectified.

      `DataType`s can contain arrays of data, enumerations, regular expressions, and
      much more.

      Core `DataType`s cannot be modified or removed, as they are considered
      essential to the Objectified platform.  Normal `DataType`s are specific to their
      `Tenant`.  Core `DataType`s are available system-wide, so use with care.  Core
      `DataType`s are defined by the project, and cannot be modified.

      The most common usage for `DataType`s outside of the core `DataType`s is in
      defining custom enumeration values.  Other `DataType`s like custom filters and
      regular expressions can be created, but these occasions are generally rare.

      Please [refer to this documentation](https://soon-to-be-created.com)
      for more detailed on best practices regarding `DataType` and `Field` definitions.
  - name: Tenant
    description: |
      `Tenant`s are names that are used to organize groups of objects.  They are used 
      to prevent name collisions that can occur when multiple organizations may 
      use similar names to describe different object definitions.

      A `Tenant` ensures that all of a given set of objects have unique names so 
      that they may easily be identified and separated under a common group.

      For instance, one `Tenant`'s definition of a `User` may differ from another 
      `Tenant`'s `User`. Same with a `Car`, `Bike`, or `Computer`.
  - name: Field
    description: |
      `Field`s are assignments of logical names defined by a `DataType` definition.

      In Object Oriented design, `Field`s define the data that can be stored for a
      `Class` property.  `Property` names are unique per `Class` and the `Field`s that
      contain the storage definitions can be reused.

      Please
      [refer to this documentation](https://soon-to-be-created.com)
      for more detailed on best practices regarding `DataType` and `Field` definitions.
  - name: Class
    description: |
      `Class`es are templates that define the _shape_ (or _schema_) of data that 
      can be contained in a record (or `Instance`).  For more information on best 
      practices on creating and updating classes, please 
      [refer to this documentation](https://soon-to-be-created.com)
      for more detailed information.
  - name: Property
    description: |
      `Properties` are member stores that are used by `Class`es to store data 
      defined by a `Field`.

      `Properties` extend `Fields` by adding options such as nullability,
      default values, required flags, and so on.  `Properties` can also be
      objects that implement other `Properties` (sub-properties).
  - name: ClassProperty
    description: |
      `ClassProperty` entries are used to assign a `Property` to a `Class` in order
      to define the shape of the data that a `Class` can store.
paths:
  /auth:
    post:
      tags:
        - Auth
      summary: Login service
      operationId: login
      description: |
        Logs a user into the system via their username and source combination.
      security: []
      requestBody:
        description: The user credentials with which to login.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
        '403':
          description: Access forbidden
  /user:
    get:
      tags:
        - User
      summary: User retrieval service
      operationId: getUser
      description: Retrieves a user's data payload from the JWT.
      security:
        - JWT: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Access forbidden
    put:
      tags:
        - User
      summary: Updates a user's data section
      operationId: putUser
      description: Replaces a user's data payload from the JWT.
      security: []
      requestBody:
        description: The user payload, only the data field is used.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: No content
        '401':
          description: Unauthorized
        '403':
          description: Access forbidden
  /data-type:
    get:
      tags:
        - DataType
      summary: Get data types
      operationId: listDataTypes
      description: |
        Retrieves a list of data types.  This list is a high level list, and
        does not include things like a user's ID.
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataType'
        '401':
          description: Unauthorized
  /data-type/{id}:
    get:
      tags:
        - DataType
      summary: Retrieves a data type by ID
      operationId: getDataTypeById
      description: Retrieves a data type by its ID
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the data type.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataType'
        '401':
          description: Unauthorized
        '404':
          description: Not found
  /tenant:
    get:
      tags:
        - Tenant
      summary: Lists tenants
      operationId: listTenants
      description: Retrieves a list of tenants
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tenant'
        '404':
          description: Not found
    post:
      tags:
        - Tenant
      summary: Creates a new tenant
      operationId: createTenant
      description: Creates a new Tenant record
      security: []
      requestBody:
        description: The tenant to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '401':
          description: Unauthorized
  /tenant/{id}:
    get:
      tags:
        - Tenant
      summary: Retrieves a tenant
      operationId: getTenantById
      description: Retrieves a tenant by its ID
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the tenant.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '404':
          description: Not found
    put:
      tags:
        - Tenant
      summary: Edits a tenant
      operationId: editTenant
      description: Edits an existing Tenant record
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the tenant.
      requestBody:
        description: The tenant to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '404':
          description: Not found
    delete:
      tags:
        - Tenant
      summary: Disables a tenant
      operationId: disableTenantById
      description: Disables/Deletes an existing Tenant record
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the data type.
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '404':
          description: Not found
  /tenant/user/{id}:
    get:
      tags:
        - Tenant
      summary: Lists tenants for user
      operationId: listTenantsByUserId
      description: Lists all of the tenants that the specific user is a member of
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TenantUser'
        '401':
          description: Unauthorized
        '404':
          description: Not found
  /tenant/{id}/user:
    get:
      tags:
        - Tenant
      summary: Lists tenant users
      operationId: listUsersByTenantId
      description: Lists users by tenant ID
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the tenant.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TenantUser'
        '401':
          description: Unauthorized
        '404':
          description: Not found
    post:
      tags:
        - Tenant
      summary: Assigns a user to a tenant
      operationId: addUserToTenantId
      description: Adds a user to a tenancy list
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the tenant.
      requestBody:
        description: The user payload, only the data field is used.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantUser'
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized
        '404':
          description: Not found
  /tenant/{id}/user/{userId}:
    delete:
      tags:
        - Tenant
      summary: Removes a user tenancy
      operationId: removeUserFromTenant
      description: Removes a user by ID from a tenant by ID
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the tenant.
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: UUID
          description: The User ID.
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '404':
          description: Not found
  /field:
    get:
      tags:
        - Field
      summary: List fields
      operationId: listFields
      description: Returns a list of fields
      security:
        - JWT: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Field'
        '401':
          description: Unauthorized
    post:
      tags:
        - Field
      summary: Creates a field
      operationId: createField
      description: Creates a new field record
      security:
        - JWT: []
      requestBody:
        description: The field payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Field'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
        '401':
          description: Unauthorized
  /field/{id}:
    get:
      tags:
        - Field
      summary: Retrieves a field
      operationId: getFieldById
      description: Retrieves a field by its ID
      security:
        - JWT: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the field.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
        '401':
          description: Unauthorized
        '404':
          description: Not found
    put:
      tags:
        - Field
      summary: Edits a field
      operationId: editFieldById
      description: Edits a field record
      security:
        - JWT: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the field.
      requestBody:
        description: The field payload to change
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Field'
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '404':
          description: Not found
    delete:
      tags:
        - Field
      summary: Disables a field
      operationId: disableFieldById
      description: Disables a field by its ID
      security:
        - JWT: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the field.
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '404':
          description: Not found
  /class:
    get:
      tags:
        - Class
      summary: Lists classes
      operationId: listClasses
      description: Lists all classes owned by a tenant
      security:
        - JWT: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Class'
        '401':
          description: Unauthorized
    post:
      tags:
        - Class
      summary: Creates a class
      operationId: createClass
      description: Creates a new class record
      security:
        - JWT: []
      requestBody:
        description: The class payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Class'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '401':
          description: Unauthorized
  /class/{id}:
    get:
      tags:
        - Class
      summary: Retrieves a class
      operationId: getClassById
      description: Retrieves a class by its ID
      security:
        - JWT: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the class.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '401':
          description: Unauthorized
        '404':
          description: Not found
    put:
      tags:
        - Class
      summary: Edits a class
      operationId: editClassById
      description: Edits a class record
      security:
        - JWT: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the class.
      requestBody:
        description: The class payload to change
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Class'
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '404':
          description: Not found
    delete:
      tags:
        - Class
      summary: Disables a class
      operationId: disableClassById
      description: Disables a class by its ID
      security:
        - JWT: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the class.
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '404':
          description: Not found
  /class/{id}/schema:
    get:
      tags:
        - Class
      summary: Retrieves a class schema
      operationId: getSchemaForClassById
      description: Retrieves a schema for the class by its ID
      security:
        - JWT: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the class.
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
        '404':
          description: Not found
  /class-property/{id}/property:
    get:
      tags:
        - ClassProperty
      summary: Lists class properties
      operationId: getPropertiesForClass
      description: Returns a list of properties assigned to a class by ID
      security:
        - JWT: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the class
      responses:
        '200':
          description: List of `ClassProperty` objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClassProperty'
        '401':
          description: Unauthorized
        '404':
          description: Not found
  /class-property/{classId}/property/{propertyId}:
    put:
      tags:
        - ClassProperty
      summary: Assigns a property to a class
      operationId: addPropertyToClass
      description: Adds a property by ID to a class by ID
      security:
        - JWT: []
      parameters:
        - in: path
          name: classId
          required: true
          schema:
            type: string
            format: UUID
          description: Class by ID
        - in: path
          name: propertyId
          required: true
          schema:
            type: string
            format: UUID
          description: Property by ID
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized
        '404':
          description: Class or Property not found
        '409':
          description: Conflict or duplicate
    delete:
      tags:
        - ClassProperty
      summary: Removes a property from a class
      operationId: deletePropertyFromClass
      description: Removes a property by ID from a class by ID
      security:
        - JWT: []
      parameters:
        - in: path
          name: classId
          required: true
          schema:
            type: string
            format: UUID
          description: Class by ID
        - in: path
          name: propertyId
          required: true
          schema:
            type: string
            format: UUID
          description: Property by ID
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '404':
          description: Class or Property not found
  /property:
    get:
      tags:
        - Property
      summary: Lists properties
      operationId: listProperties
      description: Lists all properties owned by a tenant
      security:
        - JWT: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Property'
        '401':
          description: Unauthorized
    post:
      tags:
        - Property
      summary: Creates a property
      operationId: createProperty
      description: Creates a new property record
      security:
        - JWT: []
      requestBody:
        description: The property payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '401':
          description: Unauthorized
  /property/{id}:
    get:
      tags:
        - Property
      summary: Retrieves a property
      operationId: getPropertyById
      description: Retrieves a property by its ID
      security:
        - JWT: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the property.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '401':
          description: Unauthorized
        '404':
          description: Not found
    put:
      tags:
        - Property
      summary: Edits a property
      operationId: editPropertyById
      description: Edits a property record
      security:
        - JWT: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the property].
      requestBody:
        description: The property payload to change
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '404':
          description: Not found
    delete:
      tags:
        - Property
      summary: Disables a property
      operationId: disablePropertyById
      description: Disables a property by its ID
      security:
        - JWT: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: UUID
          description: The ID of the property.
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '404':
          description: Not found
components:
  securitySchemes:
    JWT:
      type: http
      description: JWT Authorization header using Bearer scheme.
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      x-schema: obj
      required:
        - username
        - source
        - jwt
      description: Login credentials input
      properties:
        id:
          type: string
          format: uuid
          description: User ID
        emailAddress:
          type: string
          description: The email address of the user logging in.
        source:
          type: array
          items:
            type: string
            enum:
              - github
              - gitlab
              - azure
          description: Source of the account login.
        data:
          type: object
          description: Extra data associated with the user.
        createDate:
          type: string
          format: date-time
          description: Date and time of user creation
        updateDate:
          type: string
          format: date-time
          description: Date and time of user update
    DataType:
      type: object
      x-schema: obj
      required:
        - name
        - description
        - dataType
      description: |
        DataType identifies the type of data that can be assigned to a `Field`.  The DataType
        matches that of a JSON Schema data type.  Updates may be made to this table,
        but these changes are controlled by the Objectified project, as they are not
        editable.
      properties:
        id:
          type: string
          format: uuid
          description: Data Type ID
        name:
          type: string
          description: Name of the data type
          maxLength: 80
        description:
          type: string
          description: Description of the data type
          maxLength: 4096
        dataType:
          type: string
          enum:
            - STRING
            - BOOLEAN
            - NUMBER
            - INTEGER
            - NULL
            - OBJECT
            - '$REF'
        enabled:
          type: boolean
          default: true
          description: Indicates if the data type is enabled and usable
        createDate:
          type: string
          format: date-time
          description: Date the data type was created
        updateDate:
          type: string
          format: date-time
          description: Date of the last update to the data type
        deleteDate:
          type: string
          format: date-time
          description: Date the data type was disabled
    Tenant:
      type: object
      x-schema: obj
      required:
        - ownerId
        - name
      description: |
        Tenants allow for logical groups of ownership in Objectified.  It is used to
        separate and manage different organizations, users, or groups that use the same
        system while keeping their data isolated.
      properties:
        id:
          type: string
          format: UUID
          description: The ID of the Tenant
        ownerId:
          type: string
          format: UUID
          description: User ID that owns the Tenant
        name:
          type: string
          description: The name of the tenant
        enabled:
          type: boolean
          description: Indicates if the tenant record is enabled
        data:
          type: object
          description: Free-form tenant record information
        createDate:
          type: string
          format: date-time
          description: Date the tenant was created
        updateDate:
          type: string
          format: date-time
          description: Date of the last update to the tenant
        deleteDate:
          type: string
          format: date-time
          description: Date the tenant was disabled
    TenantUser:
      type: object
      x-schema: obj
      required:
        - tenantId
        - userId
      description: |
        This table describes user tenancy membership.  It describes a membership list of the
        users and tenants that they belong to, along with any additional `permissions`
        they might be assigned.
      properties:
        id:
          type: string
          format: UUID
          description: The ID of the Tenant User record
        tenantId:
          type: string
          format: UUID
          description: The ID of the Tenant
        userId:
          type: string
          format: UUID
          description: The User ID that belongs to the Tenant
        enabled:
          type: boolean
          description: Indicates if the user to tenant record is enabled
        permissions:
          type: object
          description: Permissions storage object for this user record, used for ABAC
    Field:
      type: object
      x-schema: obj
      required:
        - tenantId
        - dataTypeId
        - name
        - description
      description: |
        Field extends `DataType`s by assigning constraints, formats, patterns, 
        enumeration values, and examples.  It is used by `Property` entries to describe
        how the `Field` will be applied.
      properties:
        id:
          type: string
          format: UUID
          description: The ID of the Field
        tenantId:
          type: string
          format: UUID
          description: The Tenant ID that owns this field definition.
        dataTypeId:
          type: string
          format: UUID
          description: The Data Type ID that is used to store data in this field definition.
        name:
          type: string
          description: The name of the field
        description:
          type: string
          description: This is a description of what the field stores
        dataFormat:
          type: string
          description: This is an additional format for the data type
        pattern:
          type: string
          description: Regular expression pattern that may be applied to the input
        enumValues:
          type: array
          items:
            type: string
          description: Array of values that the enumeration can store
        enumDescriptions:
          type: array
          items:
            type: string
          description: The descriptions for each of the enumeration values
        examples:
          type: array
          items:
            type: string
          description: Free-formed examples that the data type can hold
        enabled:
          type: boolean
          description: Indicates if the field record is enabled
        createDate:
          type: string
          format: date-time
          description: Date and time of field creation
        updateDate:
          type: string
          format: date-time
          description: Date and time of field update
        deleteDate:
          type: string
          format: date-time
          description: Date and time of field deletion
    Class:
      type: object
      x-schema: obj
      required:
        - tenantId
        - ownerId
        - name
      description: |
        Classes define objects that can be stored in Objectified.  Classes are collections
        of properties that define object definitions.
      properties:
        id:
          type: string
          format: UUID
          description: The ID of the Field
        tenantId:
          type: string
          format: UUID
          description: The ID of the Tenant
        ownerId:
          type: string
          format: UUID
          description: The ID of the owner
        name:
          type: string
          description: The name of the class
        description:
          type: string
          description: This is a description of what the class defines
        enabled:
          type: boolean
          description: Indicates if the class is enabled
        createDate:
          type: string
          format: date-time
          description: Date and time of class creation
        updateDate:
          type: string
          format: date-time
          description: Date and time of class update
        deleteDate:
          type: string
          format: date-time
          description: Date and time of class deletion
    Property:
      type: object
      x-schema: obj
      required:
        - tenantId
        - fieldId
        - name
      description: |
        `Property` defines properties that accept a `Field` definition to describe the data
        in which the property represents.  The property is an extension of the `Field`,
        providing information such as nullability, array lists, default values, and
        additional constraints.
      properties:
        id:
          type: string
          format: UUID
          description: The ID of the Property
        tenantId:
          type: string
          format: UUID
          description: The ID of the Tenant
        fieldId:
          type: string
          format: UUID
          description: The ID of the Field that defines this Property
        name:
          type: string
          description: The name of the property
        description:
          type: string
          description: This is a description of what the property defines
        required:
          type: boolean
          description: Indicates whether or not this property requires a value
          default: false
        nullable:
          type: boolean
          description: Indicates if the property can be assigned a `null` value
          default: false
        isArray:
          type: boolean
          description: Indicates if the data stored in the property is an array of values
          default: false
        defaultValue:
          type: string
          maxLength: 4096
          default: null
        constraints:
          type: object
          description: Additional constraints
        enabled:
          type: boolean
          description: Indicates if the property is enabled
          default: true
        createDate:
          type: string
          format: date-time
          description: Date and time of property creation
        updateDate:
          type: string
          format: date-time
          description: Date and time of property update
        deleteDate:
          type: string
          format: date-time
          description: Date and time of property deletion
    ClassProperty:
      type: object
      x-schema: obj
      required:
        - classId
        - propertyId
      description: |
        Storage class that shows the assignment of a property by its ID to the
        class by its ID, respectively.
      properties:
        classId:
          type: string
          format: UUID
          description: ID of the class
        propertyId:
          type: string
          format: UUID
          description: ID of the property
